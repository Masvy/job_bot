from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from sqlalchemy.orm import sessionmaker
from aiogram.filters import StateFilter, or_f
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from lexiocon.user_lexicon import USERS, VACANCIES
from states.users_states import CityRequest, Data, Questions
from keyboards.user_keyboards import company_kb, vacancies_kb, \
                                     employments_kb_1, experience_kb, \
                                     education_kb, back_menu_kb, \
                                     questions_kb, employments_kb_2
from database.users import update_access, update_city, \
                           update_vacancies, update_employment, \
                           update_schedule, update_name, update_age, \
                           update_experience, update_education, \
                           update_status, update_question

company_router: Router = Router()


@company_router.callback_query(F.data == 'company_pressed')
async def show_company(callback: CallbackQuery):
    '''–≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –û –∫–æ–º–ø–∞–Ω–∏–∏'''
    await callback.message.edit_text(text=USERS['company'])
    await callback.message.answer(text=USERS['jobs_in_city'],
                                  reply_markup=company_kb)


@company_router.callback_query(F.data == 'show_vacancies_pressed',
                               StateFilter(default_state))
async def request_city(callback: CallbackQuery,
                       state: FSMContext):
    '''–≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏'''
    await callback.message.edit_text(text=USERS['city_input_2'])
    await state.set_state(CityRequest.city)


@company_router.message(StateFilter(CityRequest.city))
async def show_vacancies(message: Message,
                         state: FSMContext,
                         session_maker: sessionmaker):
    await update_city(message.from_user.id, message.text,
                      session_maker=session_maker)
    await message.answer(text=USERS['interesting_vacancies'],
                         reply_markup=vacancies_kb)
    await state.clear()


@company_router.callback_query(or_f(F.data == '–í–æ–¥–∏—Ç–µ–ª—å',
                                    F.data == '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º'))
async def show_description(callback: CallbackQuery,
                           session_maker: sessionmaker):
    '''–≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ –í–æ–¥–∏—Ç–µ–ª—å/–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º'''
    await update_vacancies(callback.from_user.id, callback.data,
                           session_maker=session_maker)
    if callback.data == '–í–æ–¥–∏—Ç–µ–ª—å':
        await callback.message.edit_text(text=VACANCIES['driver'])
        await callback.message.answer(text=USERS['types_employment_1'],
                                      reply_markup=employments_kb_1)
    elif callback.data == '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º':
        await callback.message.edit_text(text=VACANCIES['sales_manager'])
        await callback.message.answer(text=USERS['types_employment_2'],
                                      reply_markup=employments_kb_2)


@company_router.callback_query(or_f(F.data == '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
                                    F.data == '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å',
                                    F.data == '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞'),
                                    StateFilter(default_state))
async def request_employment(callback: CallbackQuery,
                             session_maker: sessionmaker,
                             state: FSMContext):
    '''
    –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å/–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å/–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞


    '''
    await update_employment(callback.from_user.id, callback.data,
                            session_maker=session_maker)
    if callback.data == '–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å':
        await callback.message.edit_text(text='–ö–∞–∫–æ–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –≤–∞—Å '
                                         '–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?')
    elif callback.data == '–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å':
        await callback.message.edit_text(text='–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã '
                                         '–≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?')
    else:
        await callback.message.edit_text(text='–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å –≤—ã '
                                         '–≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ?')
    await state.set_state(Data.schedule)


@company_router.message(StateFilter(Data.schedule))
async def request_full_name(message: Message, state: FSMContext,
                            session_maker: sessionmaker):

    await update_schedule(message.from_user.id, message.text,
                          session_maker=session_maker)
    await message.answer(text='–û—Ç–ª–∏—á–Ω–æ! –ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å '
                              '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å '
                              '–∞–Ω–∫–µ—Ç—É —Å–µ–π—á–∞—Å. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∞—à–µ '
                              '–§–ò–û:')
    await state.set_state(Data.full_name)


@company_router.message(StateFilter(Data.full_name),
                        lambda x: 2 <= len(x.text.split()) <= 3)
async def request_age(message: Message, state: FSMContext,
                      session_maker: sessionmaker):
    await update_name(message.from_user.id, message.text,
                      session_maker=session_maker)
    await message.answer(text='–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, '
                         f'{message.text.split()[1]}.\n–£–∫–∞–∂–∏—Ç–µ '
                         '–≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')
    await state.set_state(Data.age)


@company_router.message(StateFilter(Data.full_name))
async def incorrect_name(message: Message):
    await message.answer(text='–≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –§–ò–û')


@company_router.message(StateFilter(Data.age),
                        lambda x: x.text.isdigit())
async def request_expirience(message: Message, state: FSMContext,
                             session_maker: sessionmaker):
    await update_age(message.from_user.id, int(message.text),
                     session_maker=session_maker)
    await message.answer(text='–£ –≤–∞—Å –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–¥–æ–±–Ω–æ–π '
                         '–¥–æ–ª–∂–Ω–æ—Å—Ç–∏?', reply_markup=experience_kb)
    await state.clear()


@company_router.message(StateFilter(Data.age))
async def incorrect_age(message: Message):
    await message.answer(text='–≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–æ–∑—Ä–∞—Å—Ç')


@company_router.callback_query(or_f(F.data == '–î–∞',
                                    F.data == '–ù–µ—Ç'))
async def requst_education(callback: CallbackQuery,
                           session_maker: sessionmaker):
    await update_experience(callback.from_user.id, callback.data,
                            session_maker=session_maker)
    await callback.message.edit_text(text='–£–∫–∞–∂–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–≥–æ '
                                     '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:',
                                     reply_markup=education_kb)


@company_router.callback_query(or_f(F.data == '–û–±—â–µ–µ',
                                    F.data == '–°—Ä–µ–¥–Ω–µ–µ',
                                    F.data == '–í—ã—Å—à–µ–µ'))
async def requst_question(callback: CallbackQuery,
                          session_maker: sessionmaker):
    await update_education(callback.from_user.id, callback.data,
                           session_maker=session_maker)
    await update_access(callback.from_user.id, 1, session_maker=session_maker)
    await callback.message.edit_text(text='–ü–µ—Ä–≤–∏—á–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∏ '
                                     '–ø–µ—Ä–µ–¥–∞–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É. –í —Ç–µ—á–µ–Ω–∏–∏ 3 '
                                     '—Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Å—Ç–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä '
                                     '–∏ –Ω–∞–∑–Ω–∞—á–∏—Ç –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è '
                                     '–æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ä–∞–±–æ—Ç—ã.\n')
    await callback.message.answer(text='–ù–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π '
                                  '—Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n\tüìå –ü–∞—Å–ø–æ—Ä—Ç'
                                  ';\n\tüìå –ò–ù–ù;\n\tüìå –î–æ–∫—É–º–µ–Ω—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π '
                                  '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ.\n–ü–æ—Å–ª–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è '
                                  '–º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º —Å—Ä–∞–∑—É –∑–∞–∫–ª—é—á–∏—Ç—å '
                                  '—Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä/–ì–ü–• –∏ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ '
                                  '–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.')
    await callback.message.answer(text='–ó–∞—Ä–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ '
                                  '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–∞–Ω–∫ "–Ω–∞–∑–≤–∞–Ω–∏–µ".\n–ë–∞–Ω–∫ üè¶ '
                                  '"–ù–∞–∑–≤–∞–Ω–∏–µ" —è–≤–ª—è–µ—Ç—Å—è –Ω–∞—à–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∏ –ø—Ä–∏ '
                                  '—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –≤ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ '
                                  '—É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ '
                                  '–∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É.\n–í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ '
                                  '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–µ—Å–µ—Ç –Ω–∞—à–∞ '
                                  '–∫–æ–º–ø–∞–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –¥–ª—è –≤–∞—Å –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç '
                                  '—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞.\n–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å '
                                  'üí≥ –∫–∞—Ä—Ç—É –∫ –Ω–∞—à–µ–º—É –∑–∞—Ä–ø–ª–∞—Ç–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—É, '
                                  '–∑–∞–∫–∞–∂–∏—Ç–µ –µ–µ –ø–æ —Å—Å—ã–ª–∫–µ: —Å—Å—ã–ª–∫–∞')
    await callback.message.answer(text='–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤—ã–ø–ª–∞—Ç—ã –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π '
                                  '–ø–ª–∞—Ç—ã —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è, –∑–∞–∫–∞–∂–∏—Ç–µ '
                                  '–∫–∞—Ä—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —Ç.–∫. –µ–µ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ '
                                  '–∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π, –∞ –ø—Ä–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ '
                                  '—Ç—Ä—É–¥–æ–≤–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä–∞, –æ–Ω–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.'
                                  '\n\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã?',
                                  reply_markup=questions_kb)


@company_router.callback_query(F.data == 'no_questions_pressed')
async def respond_rejection(callabck: CallbackQuery,
                            session_maker: sessionmaker):
    await update_status(callabck.from_user.id, '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
                        session_maker=session_maker)
    await callabck.message.edit_text(text='–û—Ç–ª–∏—á–Ω–æ! –í —Ç–µ—á–µ–Ω–∏–∏ 3-—Ö —Ä–∞–±–æ—á–∏—Ö '
                                     '–¥–Ω–µ–π —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∏ '
                                     '–Ω–∞–∑–Ω–∞—á–∏—Ç –¥–∞—Ç—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è',
                                     reply_markup=back_menu_kb)


@company_router.callback_query(F.data == 'questions_pressed',
                               StateFilter(default_state))
async def respond_consent(callback: CallbackQuery,
                          state: FSMContext):
    await callback.message.edit_text(text='–•–æ—Ä–æ—à–æ, –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å:')
    await state.set_state(Questions.question)


@company_router.message(StateFilter(Questions.question))
async def answer_question(message: Message, state: FSMContext,
                          session_maker: sessionmaker):
    await update_question(message.from_user.id, message.text,
                          session_maker=session_maker)
    await update_status(message.from_user.id, '–°–æ–∏—Å–∫–∞—Ç–µ–ª—å',
                        session_maker=session_maker)
    await message.answer(text='–Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à –≤–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É, –æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å '
                         '–≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3-—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –∏ –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç –Ω–∞ '
                         '—ç—Ç–æ—Ç –∏ –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã.',
                         reply_markup=back_menu_kb)
    await state.clear()
